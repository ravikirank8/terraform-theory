# ðŸ“¦ Terraform 3-Tier Architecture with ALB + ASG + RDS + Monitoring + Workspaces

# âœ… Structure (added RDS + CloudWatch + bootstrap)
# â”œâ”€â”€ main.tf
# â”œâ”€â”€ variables.tf
# â”œâ”€â”€ outputs.tf
# â”œâ”€â”€ backend.tf
# â”œâ”€â”€ modules/
# â”‚   â”œâ”€â”€ vpc/
# â”‚   â”œâ”€â”€ subnet/
# â”‚   â”œâ”€â”€ sg/
# â”‚   â”œâ”€â”€ ec2/
# â”‚   â”œâ”€â”€ alb/
# â”‚   â”œâ”€â”€ asg/
# â”‚   â”œâ”€â”€ rds/
# â”‚   â””â”€â”€ monitoring/

##############################################
# MODULE: RDS (modules/rds)
##############################################
# main.tf
resource "aws_db_subnet_group" "this" {
  name       = "db-subnet-group"
  subnet_ids = var.private_subnet_ids
  tags       = var.tags
}

resource "aws_db_instance" "this" {
  identifier              = var.name
  engine                  = var.engine
  engine_version          = var.engine_version
  instance_class          = var.instance_class
  allocated_storage       = var.storage
  db_name                 = var.db_name
  username                = var.username
  password                = var.password
  vpc_security_group_ids  = [var.sg_id]
  db_subnet_group_name    = aws_db_subnet_group.this.name
  skip_final_snapshot     = true

  tags = merge(var.tags, { Name = var.name })
}

# variables.tf
variable "name" {}
variable "engine" {}
variable "engine_version" {}
variable "instance_class" {}
variable "storage" {}
variable "db_name" {}
variable "username" {}
variable "password" {}
variable "private_subnet_ids" { type = list(string) }
variable "sg_id" {}
variable "tags" { type = map(string) }

# outputs.tf
output "db_endpoint" {
  value = aws_db_instance.this.endpoint
}

##############################################
# MODULE: MONITORING (modules/monitoring)
##############################################
# main.tf
resource "aws_cloudwatch_log_group" "this" {
  name              = "/ec2/bootstrap"
  retention_in_days = 7
  tags              = var.tags
}

resource "aws_cloudwatch_metric_alarm" "cpu_alarm" {
  alarm_name          = "HighCPU"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 2
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = 120
  statistic           = "Average"
  threshold           = 70
  alarm_description   = "Alarm when CPU > 70%"
  dimensions = {
    AutoScalingGroupName = var.asg_name
  }
  alarm_actions = [var.sns_topic_arn]
  tags = var.tags
}

# variables.tf
variable "asg_name" {}
variable "sns_topic_arn" {}
variable "tags" { type = map(string) }

# outputs.tf
output "log_group_name" {
  value = aws_cloudwatch_log_group.this.name
}

##############################################
# ENHANCED ASG MODULE (modules/asg)
##############################################
# main.tf
resource "aws_launch_template" "this" {
  name_prefix   = var.name
  image_id      = var.ami
  instance_type = var.instance_type
  user_data     = base64encode(file(var.user_data_file))

  network_interfaces {
    associate_public_ip_address = false
    security_groups             = [var.sg_id]
  }

  tag_specifications {
    resource_type = "instance"
    tags          = merge(var.tags, { Name = var.name })
  }
}

resource "aws_autoscaling_group" "this" {
  desired_capacity     = var.desired_capacity
  max_size             = var.max_size
  min_size             = var.min_size
  vpc_zone_identifier  = var.subnet_ids
  target_group_arns    = [var.alb_target_group]
  launch_template {
    id      = aws_launch_template.this.id
    version = "$Latest"
  }
  tag {
    key                 = "Name"
    value               = var.name
    propagate_at_launch = true
  }
}

# variables.tf (add)
variable "user_data_file" {}

# usage in root main.tf (new modules)
module "rds" {
  source             = "./modules/rds"
  name               = "prod-db"
  engine             = "mysql"
  engine_version     = "8.0"
  instance_class     = "db.t3.micro"
  storage            = 20
  db_name            = "prodapp"
  username           = "admin"
  password           = var.db_password
  private_subnet_ids = module.subnets.private_subnet_ids
  sg_id              = module.security_groups.web_sg_id
  tags               = var.tags
}

module "monitoring" {
  source        = "./modules/monitoring"
  asg_name      = module.autoscaling.asg_name
  sns_topic_arn = var.sns_topic_arn
  tags          = var.tags
}

# variable additions
variable "db_password" {}
variable "sns_topic_arn" {}
variable "user_data_file" { default = "scripts/bootstrap.sh" }

