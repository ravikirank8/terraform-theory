What is a Data Source in Terraform?
A data source in Terraform is used to read or fetch information from existing infrastructure, instead of creating something new.

Think of it like reading data, not writing it.

  🔹 Why Use Data Sources?
You use data sources when you need to reference existing resources (e.g., a VPC, an AMI, a subnet, a security group) created outside your Terraform code — 
  maybe they were created manually, by another team, or in a different Terraform module.

    🔹 Simple Analogy
🧠 Real-Life Example:
You’re building a house (your infrastructure).
But the water line (a VPC) is already connected by the city.
Instead of digging your own well, you just want to use the city’s water line.

So, you ask the city:

“What’s the ID of the water line on my street?”

That’s exactly what a data source does.

data "aws_vpc" "default" {
  default = true
}
“Hey AWS, give me details of the default VPC in this region.”

========================
  ✅ Real-Time Use Case:
"Deploy an EC2 instance inside a pre-existing VPC, using the latest AMI, and attach an existing security group."

This is a very common scenario in production where:
The VPC and Security Groups are managed by a network/security team.
The AMI is built by the DevOps/CI pipeline team.
Your job is just to deploy the app server using Terraform.

📁 Full Working Code with Comments

# Step 1: Configure the AWS provider
provider "aws" {
  region = "us-east-1"
}
✅ What it does: Tells Terraform to use AWS in the us-east-1 region.


# Step 2: Fetch the existing VPC by name
data "aws_vpc" "existing_vpc" {
  filter {
    name   = "tag:Name"
    values = ["prod-vpc"]
  }
}
✅ What it does:
Fetches the VPC tagged prod-vpc.
This VPC is already created by the infra/network team.


# Step 3: Fetch the latest AMI for the application
data "aws_ami" "latest_ami" {
  most_recent = true
  owners      = ["self"]  # AMIs built by your team

  filter {
    name   = "name"
    values = ["myapp-*"]  # Matches names like "myapp-2025-07-01"
  }
}
✅ What it does:
Gets the most recent AMI built for your app. Useful if your CI/CD pipeline builds new AMIs with new versions of the app.

# Step 4: Get the existing Security Group for web access
data "aws_security_group" "web_sg" {
  name = "web-allow-http-https"
}
✅ What it does:
Fetches an existing security group that already allows port 80 and 443 access.
This security group was likely created by the security team.

# Step 5: Launch EC2 instance using above data sources
resource "aws_instance" "web_server" {
  ami                    = data.aws_ami.latest_ami.id
  instance_type          = "t3.micro"
  subnet_id              = data.aws_vpc.existing_vpc.default_subnet_id
  vpc_security_group_ids = [data.aws_security_group.web_sg.id]

  tags = {
    Name = "prod-web-server"
  }
}
✅ What it does:
Launches an EC2 instance with:
The latest AMI (myapp-*)
An existing subnet from the VPC
The existing security group that allows HTTP/S
Tags it as prod-web-server for clarity.

🎯 Key Benefits in Production
| 🔍 Component              | 💡 Benefit in Production                                 |
| ------------------------- | -------------------------------------------------------- |
| `data.aws_vpc`            | Reuses central VPC managed by infra team                 |
| `data.aws_ami`            | Always picks latest tested image                         |
| `data.aws_security_group` | Avoids re-creating security settings (audit, compliance) |
| EC2 Resource              | App gets deployed consistently across environments       |
✅ Real-World Use Case:
"I need to launch an EC2 instance and attach an existing security group that was created in another module or by another team."

======================================
  
🧱 Your Setup (Realistic)
Security group is already created with name: web-allow-http-https
VPC is already created with name: prod-vpc
You only want to reference these existing resources using data sources

✅ Complete Working Code Using Data Sources
provider "aws" {
  region = "us-east-1"
}

🔍 Step 1: Get Existing VPC by Name

data "aws_vpc" "prod_vpc" {
  filter {
    name   = "tag:Name"
    values = ["prod-vpc"]
  }
}

✅ This reads the existing VPC (not creating it).

🔍 Step 2: Get Existing Security Group by Name

data "aws_security_group" "web_sg" {
  name   = "web-allow-http-https"
  vpc_id = data.aws_vpc.prod_vpc.id
}

✅ This fetches the security group by name and filters by VPC ID.
📌 This is best practice — use vpc_id to make sure it fetches the right SG, especially if name is reused across VPCs.

🚀 Step 3: Launch EC2 Instance Using the Data Sources

resource "aws_instance" "web_server" {
  ami                    = "ami-1234567890abcdef0"  # Use a valid AMI ID
  instance_type          = "t2.micro"
  subnet_id              = data.aws_vpc.prod_vpc.default_network_acl_id # OR use a specific subnet if needed
  vpc_security_group_ids = [data.aws_security_group.web_sg.id]

  tags = {
    Name = "web-server-using-existing-sg"
  }
}
✅ This instance:

Uses the existing security group
Uses the existing VPC
Does not create or import anything from outside
  
📦 Output (Optional)
You can also print the instance's public IP:
output "ec2_public_ip" {
  value = aws_instance.web_server.public_ip
}

You safely deploy an EC2 instance inside a shared production environment by reading existing infrastructure (VPC, AMI, SG) using Terraform data sources — making your deployment modular, compliant, and DevOps-friendly.

=======================

🧱 Your Setup (Realistic)
Security group is already created with name: web-allow-http-https

VPC is already created with name: prod-vpc
You only want to reference these existing resources using data sources

✅ Complete Working Code Using Data Sources

provider "aws" {
  region = "us-east-1"
}
🔍 Step 1: Get Existing VPC by Name

data "aws_vpc" "prod_vpc" {
  filter {
    name   = "tag:Name"
    values = ["prod-vpc"]
  }
}
✅ This reads the existing VPC (not creating it).

🔍 Step 2: Get Existing Security Group by Name

data "aws_security_group" "web_sg" {
  name   = "web-allow-http-https"
  vpc_id = data.aws_vpc.prod_vpc.id
}
✅ This fetches the security group by name and filters by VPC ID.

📌 This is best practice — use vpc_id to make sure it fetches the right SG, especially if name is reused across VPCs.

🚀 Step 3: Launch EC2 Instance Using the Data Sources

resource "aws_instance" "web_server" {
  ami                    = "ami-1234567890abcdef0"  # Use a valid AMI ID
  instance_type          = "t2.micro"
  subnet_id              = data.aws_vpc.prod_vpc.default_network_acl_id # OR use a specific subnet if needed
  vpc_security_group_ids = [data.aws_security_group.web_sg.id]

  tags = {
    Name = "web-server-using-existing-sg"
  }
}

✅ This instance:

Uses the existing security group
Uses the existing VPC
Does not create or import anything from outside
✅ Summary in Plain English
  | What You Want                      | What You Do in Terraform                       |
| ---------------------------------- | ---------------------------------------------- |
| Use existing VPC                   | Use `data "aws_vpc"` to read it                |
| Use existing Security Group        | Use `data "aws_security_group"` to read it     |
| Attach existing SG to EC2 instance | Use `data.aws_security_group.web_sg.id` in EC2 |

  🧠 Extra Tip: If SG is in another module

  If the SG is created by another Terraform module (e.g., networking module), that module should expose it like this:
  
# Inside the networking module
output "web_sg_id" {
  value = aws_security_group.web_sg.id
}
Then in your current module:


module "networking" {
  source = "../networking"
}

resource "aws_instance" "web_server" {
  ami                    = "ami-xxx"
  instance_type          = "t2.micro"
  vpc_security_group_ids = [module.networking.web_sg_id]
}
But if you don’t have access to that module and only want to read from AWS, stick with the data block approach like above.


===========================

✅ Real Production Scenario
You're part of the App Deployment team.
The Network team already created:

A VPC (tag:Name = corp-prod-vpc)

Subnets (private and public)

A security group (web-sg) that allows HTTP/HTTPS

Your job:

Launch an EC2 instance

Use the latest hardened AMI built by the DevOps team (e.g., named hardened-ubuntu-*)

Attach the instance to a private subnet

Attach the web security group

Use data sources only to refer to existing components

✅ Complete Terraform Example with Explanations
hcl
Copy
Edit
provider "aws" {
  region = "us-east-1"
}
🔍 Step 1: Get the existing VPC by tag
hcl
Copy
Edit
data "aws_vpc" "corp_vpc" {
  filter {
    name   = "tag:Name"
    values = ["corp-prod-vpc"]
  }
}
✅ Purpose: Reads the existing VPC created by the network team, based on the tag Name = corp-prod-vpc.

🔍 Step 2: Get private subnets from that VPC
h
Copy
Edit
data "aws_subnets" "private_subnets" {
  filter {
    name   = "tag:Tier"
    values = ["private"]
  }

  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.corp_vpc.id]
  }
}
✅ Purpose:

Finds all subnets in the VPC that are tagged as Tier = private

You will launch your EC2 in one of these private subnets

🔍 Step 3: Get the security group by name
hcl
Copy
Edit
data "aws_security_group" "web_sg" {
  name   = "web-sg"
  vpc_id = data.aws_vpc.corp_vpc.id
}
✅ Purpose:

Finds the security group that allows HTTP/HTTPS

Filters by VPC to ensure it matches the right one

🔍 Step 4: Get the latest AMI for your base image
hcl
Copy
Edit
data "aws_ami" "latest_hardened_ubuntu" {
  most_recent = true
  owners      = ["self"] # Built by your team or CI pipeline

  filter {
    name   = "name"
    values = ["hardened-ubuntu-*"]
  }
}
✅ Purpose:

Dynamically selects the latest image

Keeps your EC2 always based on the most recent hardened build

🚀 Step 5: Launch the EC2 instance
hcl
Copy
Edit
resource "aws_instance" "app_server" {
  ami                         = data.aws_ami.latest_hardened_ubuntu.id
  instance_type               = "t3.medium"
  subnet_id                   = data.aws_subnets.private_subnets.ids[0]
  vpc_security_group_ids      = [data.aws_security_group.web_sg.id]
  associate_public_ip_address = false

  tags = {
    Name        = "corp-prod-app-server"
    Environment = "production"
    Owner       = "app-team"
  }
}
✅ Purpose:

Launches the EC2 instance with:
The latest hardened AMI
In a private subnet (for security)
Using the existing web security group
No public IP (because it’s in a private subnet)
